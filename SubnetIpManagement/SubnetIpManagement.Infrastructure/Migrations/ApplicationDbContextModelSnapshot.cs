// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SubnetIpManagement.Infrastructure.Data;

#nullable disable

namespace SubnetIpManagement.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SubnetIpManagement.Domain.Entities.IpAddress", b =>
                {
                    b.Property<int>("IpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IpId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("IpAddressValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SubnetId")
                        .HasColumnType("int");

                    b.HasKey("IpId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SubnetId");

                    b.ToTable("IpAddresses");
                });

            modelBuilder.Entity("SubnetIpManagement.Domain.Entities.Subnet", b =>
                {
                    b.Property<int>("SubnetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubnetId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("SubnetAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubnetName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubnetId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Subnets");
                });

            modelBuilder.Entity("SubnetIpManagement.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SubnetIpManagement.Domain.Entities.IpAddress", b =>
                {
                    b.HasOne("SubnetIpManagement.Domain.Entities.User", "User")
                        .WithMany("IPAddresses")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SubnetIpManagement.Domain.Entities.Subnet", "Subnet")
                        .WithMany("IPAddresses")
                        .HasForeignKey("SubnetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subnet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SubnetIpManagement.Domain.Entities.Subnet", b =>
                {
                    b.HasOne("SubnetIpManagement.Domain.Entities.User", "User")
                        .WithMany("Subnets")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SubnetIpManagement.Domain.Entities.Subnet", b =>
                {
                    b.Navigation("IPAddresses");
                });

            modelBuilder.Entity("SubnetIpManagement.Domain.Entities.User", b =>
                {
                    b.Navigation("IPAddresses");

                    b.Navigation("Subnets");
                });
#pragma warning restore 612, 618
        }
    }
}
